from lazy_object_proxy.utils import await_
from telegram import Update
from telegram.ext import Application, CallbackQueryHandler, ContextTypes, MessageHandler, filters, CommandHandler


from credentials import*
from gpt import ChatGptService
from util import*


async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data['mode'] = 'main'
    text = load_message('main')
    await send_image(update, context, 'main')
    await send_text(update, context, text)
    await show_main_menu(update, context, {
        'start': '–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é',
        'random': '–£–∑–Ω–∞—Ç—å —Å–ª—É—á–∞–π–Ω—ã–π –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã–π —Ñ–∞–∫—Ç üß†',
        'gpt': '–ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å —á–∞—Ç—É GPT ü§ñ',
        'talk': '–ü–æ–≥–æ–≤–æ—Ä–∏—Ç—å —Å –∏–∑–≤–µ—Å—Ç–Ω–æ–π –ª–∏—á–Ω–æ—Å—Ç—å—é üë§',
        'quiz': '–ü–æ—É—á–∞—Å—Ç–≤–æ–≤–∞—Ç—å –≤ –∫–≤–∏–∑–µ ‚ùì',
        'translator': '–ü–µ—Ä–µ–≤–µ—Å—Ç–∏ —Ç–µ–∫—Å—Ç üìñ',
        'resume': '–ü–æ–º–æ—â—å —Å —Ä–µ–∑—é–º–µ üßë‚Äçüéì'
    })


async def stop(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.callback_query.answer()
    await send_text(update, context, '–ë–µ–∑ –ø—Ä–æ–±–ª–µ–º! –ù–∞—á–Ω–µ–º —Å–Ω–∞—á–∞–ª–∞.')
    await start(update, context)


async def random(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data['mode'] = 'random'
    await send_image(update, context, 'random')
    answer = await chat_gpt.send_question(load_prompt('random'), '')
    await send_text_buttons(update, context, answer, buttons={
        'random_more': '–ï—â–µ —Ñ–∞–∫—Ç',
        'stop': '–ó–∞–≤–µ—Ä—à–∏—Ç—å'
    })


async def random_buttons(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.callback_query.answer()
    await random(update, context)


async def gpt(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data['mode'] = 'gpt'
    chat_gpt.set_prompt(load_prompt('gpt'))
    text = load_message('gpt')
    await send_image(update, context, 'gpt')
    await send_text(update, context, text)


async def gpt_dialog(update: Update, context: ContextTypes.DEFAULT_TYPE):
    request = update.message.text
    message = await send_text(update, context, '–î—É–º–∞—é –Ω–∞–¥ –æ—Ç–≤–µ—Ç–æ–º...')
    answer = await chat_gpt.add_message(request)
    await message.delete()
    await send_text_buttons(update, context,
                                    answer,
                                    buttons={'stop': '–ó–∞–≤–µ—Ä—à–∏—Ç—å'})


async def talk(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data['mode'] = 'talk'
    text = load_message('talk')
    await send_image(update, context, 'talk')
    await send_text_buttons(update, context, text, {
        'talk_cobain': '–ö—É—Ä—Ç –ö–æ–±–µ–π–Ω - –°–æ–ª–∏—Å—Ç –≥—Ä—É–ø–ø—ã Nirvana üé∏',
        'talk_hawking': '–°—Ç–∏–≤–µ–Ω –•–æ–∫–∏–Ω–≥ - –§–∏–∑–∏–∫ üî¨',
        'talk_nietzsche': '–§—Ä–∏–¥—Ä–∏—Ö –ù–∏—Ü—à–µ - –§–∏–ª–æ—Å–æ—Ñ üß†',
        'talk_queen': '–ï–ª–∏–∑–∞–≤–µ—Ç–∞ II - –ö–æ—Ä–æ–ª–µ–≤–∞ –ë—Ä–∏—Ç–∞–Ω–∏–∏üëë',
        'talk_tolkien': '–î–∂–æ–Ω –¢–æ–ª–∫–∏–µ–Ω - –ê–≤—Ç–æ—Ä "–í–ª–∞—Å—Ç–µ–ª–∏–Ω–∞ –ö–æ–ª–µ—Ü" üìñ',
        'talk_monroe': '–ú—ç—Ä—ç–ª–∏–Ω –ú–æ–Ω—Ä–æ - –°–µ–∫—Å-—Å–∏–º–≤–æ–ª 1950-—Ö –≥–æ–¥–æ–≤ üë∏',
        'talk_bulgakov': '–ú–∏—Ö–∞–∏–ª –ë—É–ª–≥–∞–∫–æ–≤ -  –ü–∏—Å–∞—Ç–µ–ª—å, –¥—Ä–∞–º–∞—Ç—É—Ä–≥ üìö',
        'talk_gogol': '–ù–∏–∫–æ–ª–∞–π –ì–æ–≥–æ–ª—å - –ö–ª–∞—Å—Å–∏–∫ —Ä—É—Å—Å–∫–æ–π –ª–∏—Ç–µ—Ä–∞—Ç—É—Ä—ã üïØ',
        'talk_kleopatra': '–ö–ª–µ–æ–ø–∞—Ç—Ä–∞ - –ü–æ—Å–ª–µ–¥–Ω—è—è —Ü–∞—Ä–∏—Ü–∞ –ï–≥–∏–ø—Ç–∞ üõï',
        'talk_mask': '–ò–ª–æ–Ω –ú–∞—Å–∫ - –û—Å–Ω–æ–≤–∞—Ç–µ–ª—å –∫–æ–º–ø–∞–Ω–∏–∏ SpaceX ü¶æ',
        'talk_rasputin': '–ì—Ä–∏–≥–æ—Ä–∏–π –†–∞—Å–ø—É—Ç–∏–Ω - ¬´–¶–∞—Ä—Å–∫–∏–π –¥—Ä—É–≥¬ª üîÆ'
    })


async def talk_buttons(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.callback_query.answer()
    data = update.callback_query.data
    chat_gpt.set_prompt(load_prompt(data))
    greet = await chat_gpt.add_message('–ü–æ–∑–¥–æ—Ä–æ–≤–∞–π—Å—è —Å–æ –º–Ω–æ–π')
    await send_image(update, context, data)
    await send_text(update, context, greet)


async def talk_dialog(update: Update, context: ContextTypes.DEFAULT_TYPE):
    request = update.message.text
    message = await send_text(update, context, '–£–∂–µ –ø–∏—à—É —Ç–µ–±–µ –æ—Ç–≤–µ—Ç. –ê —Ç—ã –ø–æ–∫–∞ —É—Å—Ç—Ä–∞–∏–≤–∞–π—Å—è –ø–æ—É–¥–æ–±–Ω–µ–µ.')
    answer = await chat_gpt.add_message(request)
    await message.delete()
    await send_text_buttons(update, context,
                            answer,
                            buttons={'stop': '–ó–∞–≤–µ—Ä—à–∏—Ç—å'})


async def quiz(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data['mode'] = 'quiz'
    context.user_data['score'] = 0
    chat_gpt.set_prompt(load_prompt('quiz'))
    await send_image(update, context, 'quiz')
    await send_text_buttons(update, context, '–í—ã–±–µ—Ä–∏—Ç–µ —Ç–µ–º—É: ', {'quiz_prog': '–ü—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–µ',
                                                                'quiz_art': '–ò—Å–∫—É—Å—Å—Ç–≤–æ',
                                                                'quiz_literature': '–õ–∏—Ç–µ—Ä–∞—Ç—É—Ä–∞',
                                                                 'quiz_music': '–ú—É–∑—ã–∫–∞',
                                                                 'quiz_fashion': '–ú–æ–¥–∞'
                                                                })


async def quiz_buttons(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.callback_query.data == 'quiz_change':
        await update.callback_query.answer()
        await quiz(update, context)
    else:
        await update.callback_query.answer()
        question = await chat_gpt.add_message(update.callback_query.data)
        await send_text(update, context, question)


async def quiz_dialog(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = update.message.text
    answer = await chat_gpt.add_message(text)
    if answer == '–ü—Ä–∞–≤–∏–ª—å–Ω–æ!':
        context.user_data['score'] = context.user_data.get('score', 0) + 1
    await send_text_buttons(update, context, answer + '\n\n–í–∞—à —Å—á–µ—Ç: ' + str(
        context.user_data['score']), {'quiz_more': '–°–ª–µ–¥—É—é—â–∏–π –≤–æ–ø—Ä–æ—Å',
                                              'quiz_change': '–í—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥—É—é —Ç–µ–º—É',
                                              'stop': '–ó–∞–≤–µ—Ä—à–∏—Ç—å'
                                              })


async def translator(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data['mode'] = 'translator'
    text = load_message('translator')
    await send_image(update, context, 'translator')
    await send_text_buttons(update, context, text, {
        'translator_English': '–ê–Ω–≥–ª–∏–π—Å–∫–∏–π üá¨üáß',
        'translator_German': '–ù–µ–º–µ—Ü–∫–∏–π üá©üá™',
        'translator_Turkish': '–¢—É—Ä–µ—Ü–∫–∏–π üáπüá∑',
        'translator_French': '–§—Ä–∞–Ω—Ü—É–∑—Å–∫–∏–π üá®üáµ',
        'translator_Chinese': '–ö–∏—Ç–∞–π—Å–∫–∏–π üá®üá≥',
        'translator_Japanese': '–Ø–ø–æ–Ω—Å–∫–∏–π üáØüáµ',
        'translator_Korean': '–ö–æ—Ä–µ–π—Å–∫–∏–π üá∞üá∑'
    })


async def translator_buttons(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.callback_query.answer()
    data = update.callback_query.data
    chat_gpt.set_prompt(load_prompt(data))
    await translator_dialog(update, context)


async def translator_dialog(update: Update, context: ContextTypes.DEFAULT_TYPE):
    request = update.message.text
    message = await send_text(update, context, '–£–∂–µ –ø–µ—Ä–µ–≤–æ–∂—É, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ –º–∏–Ω—É—Ç–∫—É.')
    answer = await chat_gpt.add_message(request)
    await message.delete()
    await send_text_buttons(update, context,
                            answer,
                            buttons={'stop': '–ó–∞–≤–µ—Ä—à–∏—Ç—å'})


async def resume(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data['mode'] = 'resume'
    text = load_message('resume')
    chat_gpt.set_prompt(load_prompt('resume'))
    await send_image(update, context, 'resume')
    await send_text(update, context, text)


async def resume_dialog(update: Update, context: ContextTypes.DEFAULT_TYPE):
    request = update.message.text
    message = await send_text(update, context, '–ë—É–∫–≤–∞–ª—å–Ω–æ –ø–∞—Ä—É –º–∏–Ω—É—Ç –∏ –≤–∞—à–µ —Ä–µ–∑—é–º–µ –±—É–¥–µ—Ç –≥–æ—Ç–æ–≤–æ.')
    answer = await chat_gpt.add_message(request)
    await message.delete()
    await send_text_buttons(update, context,
                            answer,
                            buttons={'stop': '–ó–∞–≤–µ—Ä—à–∏—Ç—å'})


async def text_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if context.user_data['mode'] in ('main', 'random'):
        await start(update, context)
    elif context.user_data['mode'] == 'gpt':
        await gpt_dialog(update, context)
    elif context.user_data['mode'] == 'talk':
        await talk_dialog(update, context)
    elif context.user_data['mode'] == 'quiz':
        await quiz_dialog(update, context)
    elif context.user_data['mode'] == 'translator':
        await translator_dialog(update, context)
    elif context.user_data['mode'] == 'resume':
        await resume_dialog(update, context)


chat_gpt = ChatGptService(ChatGPT_TOKEN)
app = Application.builder().token(token).build()


app.add_handler(CommandHandler('start', start))
app.add_handler(CommandHandler('random', random))
app.add_handler(CommandHandler('gpt', gpt))
app.add_handler(CommandHandler('talk', talk))
app.add_handler(CommandHandler('quiz', quiz))
app.add_handler(CommandHandler('translator', translator))
app.add_handler(CommandHandler('resume', resume))


app.add_handler(CallbackQueryHandler(random_buttons, pattern='random_more'))
app.add_handler(CallbackQueryHandler(talk_buttons, pattern='^talk_.*'))
app.add_handler(CallbackQueryHandler(quiz_buttons, pattern='^quiz_.*'))
app.add_handler(CallbackQueryHandler(translator_buttons, pattern='^translator_.*'))
app.add_handler(CallbackQueryHandler(stop, pattern='stop'))
app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, text_handler))


app.add_handler(CallbackQueryHandler(default_callback_handler))
app.run_polling()